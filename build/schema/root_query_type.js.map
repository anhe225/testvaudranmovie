{"version":3,"sources":["../../server/schema/root_query_type.js"],"names":["mongoose","require","graphql","GraphQLObjectType","GraphQLList","GraphQLID","GraphQLNonNull","MovieType","ReviewType","Review","model","Movie","RootQuery","name","fields","movies","type","resolve","find","movie","args","id","parentValue","findById","review","module","exports"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;IACQE,iB,GAA8DD,O,CAA9DC,iB;IAAmBC,W,GAA2CF,O,CAA3CE,W;IAAaC,S,GAA8BH,O,CAA9BG,S;IAAWC,c,GAAmBJ,O,CAAnBI,c;;AACnD,IAAMC,YAAYN,QAAQ,cAAR,CAAlB;AACA,IAAMO,aAAaP,QAAQ,eAAR,CAAnB;AACA,IAAMQ,SAAST,SAASU,KAAT,CAAe,QAAf,CAAf;AACA,IAAMC,QAAQX,SAASU,KAAT,CAAe,OAAf,CAAd;;AAEA,IAAME,YAAY,IAAIT,iBAAJ,CAAsB;AACtCU,QAAM,eADgC;AAEtCC,UAAQ;AAAA,WAAO;AACb;AACAC,cAAQ;AACNC,cAAM,IAAIZ,WAAJ,CAAgBG,SAAhB,CADA;AAENU,eAFM,qBAEI;AACR,iBAAON,MAAMO,IAAN,CAAW,EAAX,CAAP;AACD;AAJK,OAFK;AAQb;AACAC,aAAO;AACLH,cAAMT,SADD;AAELa,cAAM,EAAEC,IAAI,EAAEL,MAAM,IAAIV,cAAJ,CAAmBD,SAAnB,CAAR,EAAN,EAFD;AAGLY,eAHK,mBAGGK,WAHH,QAGwB;AAAA,cAAND,EAAM,QAANA,EAAM;;AAC3B,iBAAOV,MAAMY,QAAN,CAAeF,EAAf,CAAP;AACD;AALI,OATM;AAgBbG,cAAQ;AACN;AACAR,cAAMR,UAFA;AAGNY,cAAM,EAAEC,IAAI,EAAEL,MAAM,IAAIV,cAAJ,CAAmBD,SAAnB,CAAR,EAAN,EAHA;AAINY,eAJM,mBAIEK,WAJF,SAIuB;AAAA,cAAND,EAAM,SAANA,EAAM;;AAC3B,iBAAOZ,OAAOc,QAAP,CAAgBF,EAAhB,CAAP;AACD;AANK;AAhBK,KAAP;AAAA;AAF8B,CAAtB,CAAlB;;AA6BAI,OAAOC,OAAP,GAAiBd,SAAjB","file":"root_query_type.js","sourcesContent":["const mongoose = require('mongoose');\r\nconst graphql = require('graphql');\r\nconst { GraphQLObjectType, GraphQLList, GraphQLID, GraphQLNonNull } = graphql;\r\nconst MovieType = require('./movie_type');\r\nconst ReviewType = require('./review_type');\r\nconst Review = mongoose.model('review');\r\nconst Movie = mongoose.model('movie');\r\n\r\nconst RootQuery = new GraphQLObjectType({\r\n  name: 'RootQueryType',\r\n  fields: () => ({\r\n    //récupérer tous les films\r\n    movies: {\r\n      type: new GraphQLList(MovieType),\r\n      resolve() {\r\n        return Movie.find({});\r\n      }\r\n    },\r\n    // retrouver un film par son id\r\n    movie: {\r\n      type: MovieType,\r\n      args: { id: { type: new GraphQLNonNull(GraphQLID) } },\r\n      resolve(parentValue, { id }) {\r\n        return Movie.findById(id);\r\n      }\r\n    },\r\n    review: {\r\n      // retrouver une review par son id\r\n      type: ReviewType,\r\n      args: { id: { type: new GraphQLNonNull(GraphQLID) } },\r\n      resolve(parentValue, { id }) {\r\n        return Review.findById(id);\r\n      }\r\n    }\r\n  })\r\n});\r\n\r\nmodule.exports = RootQuery;\r\n"]}