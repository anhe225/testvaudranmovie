{"version":3,"sources":["../../server/models/movie.js"],"names":["mongoose","require","Schema","MovieSchema","title","type","String","user","Types","ObjectId","ref","reviews","statics","addReview","movieId","content","Review","model","Movie","findById","then","review","movie","push","updateMovie","findOneAndUpdate","_id","Promise","all","save","findReviews","id","populate","pre","done","self","models","findOne","err","Error"],"mappings":";;;;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASF,SAASE,MAAxB;;AAEA,IAAMC,cAAc,IAAID,MAAJ,CAAW;AAC7BE,SAAO,EAAEC,MAAMC,MAAR,EADsB;AAE7BC,QAAM;AACJF,UAAMH,OAAOM,KAAP,CAAaC,QADf;AAEJC,SAAK;AAFD,GAFuB;AAM7BC,WAAS,CAAC;AACRN,UAAMH,OAAOM,KAAP,CAAaC,QADX;AAERC,SAAK;AAFG,GAAD;AANoB,CAAX,CAApB;;AAYAP,YAAYS,OAAZ,CAAoBC,SAApB,GAAgC,UAASC,OAAT,EAAkBC,OAAlB,EAA2B;AACzD,MAAMC,SAAShB,SAASiB,KAAT,CAAe,QAAf,CAAf;AACA,MAAMC,QAAQlB,SAASiB,KAAT,CAAe,OAAf,CAAd;;AAEA,SAAO,KAAKE,QAAL,CAAcL,OAAd,EACJM,IADI,CACC,iBAAS;;AAEb,QAAMC,SAAS,IAAIL,MAAJ,CAAY,EAACD,gBAAD,EAAUO,YAAV,EAAZ,CAAf;AACAA,UAAMX,OAAN,CAAcY,IAAd,CAAmBF,MAAnB;AACD,QAAMG,cAAeN,MAAMO,gBAAN,CAAuB,EAACC,KAAIJ,MAAMI,GAAX,EAAvB,EAAuC,EAACf,SAAQW,MAAMX,OAAf,EAAvC,CAArB;AACC,WAAOgB,QAAQC,GAAR,CAAY,CAACP,OAAOQ,IAAP,EAAD,EAAeL,WAAf,CAAZ,EACJJ,IADI,CACC;AAAA;AAAA,UAAEC,MAAF;AAAA,UAAUC,KAAV;;AAAA,aAAqBA,KAArB;AAAA,KADD,CAAP;AAED,GARI,CAAP;AASD,CAbD;;AAeAnB,YAAYS,OAAZ,CAAoBkB,WAApB,GAAkC,UAASC,EAAT,EAAa;AAC7C,SAAO,KAAKZ,QAAL,CAAcY,EAAd,EACJC,QADI,CACK,SADL,EAEJZ,IAFI,CAEC;AAAA,WAASE,MAAMX,OAAf;AAAA,GAFD,CAAP;AAGD,CAJD;;AAMAR,YAAY8B,GAAZ,CAAgB,MAAhB,EAAwB,UAAUC,IAAV,EAAgB;AACtC,MAAIC,OAAO,IAAX;AACAnC,WAASoC,MAAT,CAAgB,OAAhB,EAAyBC,OAAzB,CAAiC,EAACjC,OAAO+B,KAAK/B,KAAb,EAAjC,EAAsD,UAACkC,GAAD,EAAM/B,IAAN,EAAe;AACjE,QAAGA,IAAH,EAAS;AACL2B,WAAK,IAAIK,KAAJ,CAAU,2BAAV,CAAL;AACH,KAFD,MAEO;AACHL;AACH;AACJ,GAND;AAOD,CATD;AAUAlC,SAASiB,KAAT,CAAe,OAAf,EAAwBd,WAAxB","file":"movie.js","sourcesContent":["const mongoose = require('mongoose');\r\nconst Schema = mongoose.Schema;\r\n\r\nconst MovieSchema = new Schema({\r\n  title: { type: String },\r\n  user: {\r\n    type: Schema.Types.ObjectId,\r\n    ref: 'user'\r\n  },\r\n  reviews: [{\r\n    type: Schema.Types.ObjectId,\r\n    ref: 'review'\r\n  }]\r\n});\r\n\r\nMovieSchema.statics.addReview = function(movieId, content) {\r\n  const Review = mongoose.model('review');\r\n  const Movie = mongoose.model('movie');\r\n  \r\n  return this.findById(movieId)\r\n    .then(movie => {\r\n      \r\n      const review = new Review( {content ,movie} );   \r\n      movie.reviews.push(review);  \r\n     const updateMovie =  Movie.findOneAndUpdate({_id:movie._id},{reviews:movie.reviews})\r\n      return Promise.all([review.save(),updateMovie])\r\n        .then(([review, movie]) => movie);\r\n    });\r\n}\r\n\r\nMovieSchema.statics.findReviews = function(id) {\r\n  return this.findById(id)\r\n    .populate('reviews')\r\n    .then(movie => movie.reviews);\r\n}\r\n\r\nMovieSchema.pre(\"save\", function (done) {\r\n  var self = this;\r\n  mongoose.models[\"movie\"].findOne({title: self.title}, (err, user) => {\r\n      if(user) {\r\n          done(new Error(\"Le titre doit Ãªtre unique\"));\r\n      } else {\r\n          done();\r\n      }\r\n  });\r\n});\r\nmongoose.model('movie', MovieSchema);\r\n"]}